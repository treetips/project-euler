using System;
using System.Linq;
using NUnit.Framework;

namespace project_euler.Test
{
  /// <summary>
  /// <a href="http://odz.sakura.ne.jp/projecteuler/?Problem+8">Problem 8 「数字列中の最大の積」</a>
  /// <remarks>
  /// 次の1000桁の数字のうち, 隣接する4つの数字の総乗の中で, 最大となる値は, 9 × 9 × 8 × 9 = 5832である.
  ///
  /// 73167176531330624919225119674426574742355349194934
  /// 96983520312774506326239578318016984801869478851843
  /// 85861560789112949495459501737958331952853208805511
  /// 12540698747158523863050715693290963295227443043557
  /// 66896648950445244523161731856403098711121722383113
  /// 62229893423380308135336276614282806444486645238749
  /// 30358907296290491560440772390713810515859307960866
  /// 70172427121883998797908792274921901699720888093776
  /// 65727333001053367881220235421809751254540594752243
  /// 52584907711670556013604839586446706324415722155397
  /// 53697817977846174064955149290862569321978468622482
  /// 83972241375657056057490261407972968652414535100474
  /// 82166370484403199890008895243450658541227588666881
  /// 16427171479924442928230863465674813919123162824586
  /// 17866458359124566529476545682848912883142607690042
  /// 24219022671055626321111109370544217506941658960408
  /// 07198403850962455444362981230987879927244284909188
  /// 84580156166097919133875499200524063689912560717606
  /// 05886116467109405077541002256983155200055935729725
  /// 71636269561882670428252483600823257530420752963450
  /// この1000桁の数字から13個の連続する数字を取り出して, それらの総乗を計算する. では、それら総乗のうち、最大となる値はいくらか.
  ///
  /// EX 6桁の数123789から5個の連続する数字を取り出す場合, 1*2*3*7*8と2*3*7*8*9の二通りとなり, 後者の2*3*7*8*9=3024が最大の総乗となる.
  /// </remarks>
  /// </summary>
  public class P008
  {
    private static ulong Run(int consecutive)
    {
      var result = 0ul;
      for (var offset = 0; offset < Data.Length; offset++)
      {
        if (Data.Length < offset + consecutive)
        {
          break;
        }

        var str = Data.Substring(offset, consecutive);
        var sum = str.ToCharArray().ToList().Select(n => ulong.Parse(n.ToString()))
          .Aggregate((prev, current) => prev * current);
        if (result < sum)
        {
          result = sum;
        }
      }

      return result;
    }

    private const string Data = "73167176531330624919225119674426574742355349194934" +
                                "96983520312774506326239578318016984801869478851843" +
                                "85861560789112949495459501737958331952853208805511" +
                                "12540698747158523863050715693290963295227443043557" +
                                "66896648950445244523161731856403098711121722383113" +
                                "62229893423380308135336276614282806444486645238749" +
                                "30358907296290491560440772390713810515859307960866" +
                                "70172427121883998797908792274921901699720888093776" +
                                "65727333001053367881220235421809751254540594752243" +
                                "52584907711670556013604839586446706324415722155397" +
                                "53697817977846174064955149290862569321978468622482" +
                                "83972241375657056057490261407972968652414535100474" +
                                "82166370484403199890008895243450658541227588666881" +
                                "16427171479924442928230863465674813919123162824586" +
                                "17866458359124566529476545682848912883142607690042" +
                                "24219022671055626321111109370544217506941658960408" +
                                "07198403850962455444362981230987879927244284909188" +
                                "84580156166097919133875499200524063689912560717606" +
                                "05886116467109405077541002256983155200055935729725" +
                                "71636269561882670428252483600823257530420752963450";

    [Test]
    public void テスト1()
    {
      Assert.AreEqual(5832ul, Run(4));
    }

    [Test]
    public void テスト2()
    {
      Assert.AreEqual(23514624000ul, Run(13));
    }
  }
}
